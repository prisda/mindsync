rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // ===== Helper Functions =====
    
    // Authentication
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Data Validation
    function hasAllRequiredFields(data, fields) {
      return fields.hasAll(data.keys());
    }

    function isValidTimestamp(data, field) {
      return data[field] is timestamp || data[field] is string;
    }

    function isValidString(data, field, maxLength) {
      return data[field] is string && 
        data[field].size() <= maxLength;
    }

    function isValidStringArray(data, field, maxItems, maxLength) {
      return data[field] == null || 
        (data[field] is list && 
         data[field].size() <= maxItems &&
         data[field].hasAll([]));
    }

    // Note Validation
    function isValidNote() {
      let data = request.resource.data;
      return data.userId == request.auth.uid
          && (!('title' in data) || isValidString(data, 'title', 200))
          && (!('content' in data) || isValidString(data, 'content', 50000))
          && (!('createdAt' in data) || isValidTimestamp(data, 'createdAt'))
          && (!('updatedAt' in data) || isValidTimestamp(data, 'updatedAt'))
          && (!('tags' in data) || isValidStringArray(data, 'tags', 50, 30))
          && (data.isPinned == null || data.isPinned is bool)
          && (data.type == null || data.type in ['note', 'capture']);
    }

    // User Validation
    function isValidUser() {
      let data = request.resource.data;
      return data.uid == request.auth.uid
          && isValidString(data, 'email', 100)
          && isValidTimestamp(data, 'createdAt')
          && (data.displayName == null || isValidString(data, 'displayName', 100))
          && (data.photoURL == null || isValidString(data, 'photoURL', 500))
          && (data.role == null || data.role in ['user', 'admin']);
    }

    // ===== Collection Rules =====

    // Notes Collection
    match /notes/{noteId} {
      allow read: if isAuthenticated() && 
        (!resource.data.exists() || resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() && isValidNote();
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid && 
        isValidNote() &&
        request.resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );

      // Note Comments Subcollection
      match /comments/{commentId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && 
          request.resource.data.userId == request.auth.uid;
        allow update, delete: if isAuthenticated() && 
          resource.data.userId == request.auth.uid;
      }
    }
    
    // Users Collection
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated() && isValidUser();
      allow update: if isOwner(userId) && isValidUser();
      allow delete: if isAdmin();
      
      // User Settings Subcollection
      match /settings/{settingId} {
        allow read: if isOwner(userId) || isAdmin();
        allow write: if isOwner(userId) && 
          (!('role' in request.resource.data) || request.resource.data.role == 'user');
        allow delete: if isOwner(userId) || isAdmin();
      }

      // User Preferences Subcollection
      match /preferences/{prefId} {
        allow read: if isOwner(userId);
        allow write: if isOwner(userId);
        allow delete: if isOwner(userId) || isAdmin();
      }
    }

    // Tags Collection
    match /tags/{tagId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
    }

    // Shared Notes Collection
    match /shared_notes/{shareId} {
      allow read: if isAuthenticated() && (
        resource.data.sharedWith == request.auth.uid || 
        resource.data.userId == request.auth.uid
      );
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        resource.data.sharedWith == request.auth.uid ||
        isAdmin()
      );
    }

    // Admin Collection
    match /admin/{docId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
      allow delete: if isAdmin();
    }

    // System Settings Collection
    match /settings/{settingId} {
      allow read: if isAuthenticated();
      allow write, delete: if isAdmin();
    }

    // Backup Collection
    match /backups/{backupId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}